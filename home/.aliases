_CWD=$(cd $(dirname ${BASH_SOURCE:-$0}); pwd)
_BIN_DIR="${_CWD}/../bin"

# command_ranking
function command_ranking() {
  echo "=== total ==="
  history | perl -nla -e 'print $F[1]' | sort | uniq -c | sort -nr | head -20
  echo ""
  echo "=== git subcommand ==="
  history | perl -nla -e 'print $F[2] if $F[1] =~ /^(g|git)$/' | sort | uniq -c | sort -nr | head -20
}

# one letter alias
alias b="bundle "
alias d="docker "
alias g="git "
alias v="vim "

# ag
function agp() {
  ag $* | peco
}

# ask_yesno
function ask_yesno() {
  read -p "$1 ([y]es or [N]o): "
  case $(echo $REPLY | tr '[A-Z]' '[a-z]') in
    y|yes) echo "yes" ;;
    *)     echo "no" ;;
  esac
}

# apache
alias grace="sudo apachectl graceful"

function catline() {
  if [ $2 ]; then
    cond="if \$. >= $2";
  fi

  if [ $3 ]; then
    cond="${cond} && \$. <= $3"
  fi
  perl -ln -e "print $cond " $1;
}

# bundle
alias be="bundle exec spring stop && bundle exec "

# cd
cd() {
	command cd "$@"
	local s=$?
	if [[ ($s -eq 0) && (${#FUNCNAME[*]} -eq 1) ]]; then
		history -s cd $(printf "%q" "$PWD")
	fi
	return $s
}

# cd2 X で $cd_X のディレクトに移動
function cd2(){
  direnv="\$cd_$1"
  dir=`eval echo $direnv`
  if [ $dir ]; then
    cd $dir
  fi
}

# ctags
alias ctags="`brew --prefix`/bin/ctags"

# date
function yyyymmddhhmmss(){
  date $@ +%Y%m%d%H%M%S
}

function yyyymmdd(){
  date $@ +%Y%m%d
}

function mmdd(){
  date $@ +%m%d
}

# docker-compose
doc="docker-compose"

# exec
alias reload="exec \$SHELL -l"
alias reload!="reload"

# find
function delete-dead-symlinks() {
  find -L $1 -type l -exec rm -i {} +
}

# git
alias git="cat ~/.ssh/conf.d/*.conf > ~/.ssh/config;git" # see: http://qiita.com/tumf/items/73e495e1274bc25acf5f
## git add
alias ga="git add "
alias gap="git add -p"
alias gau="git add -u"
function set_general_git_config() {
  git config --local user.email kurikei@gmail.com
  git config --local user.name kurikei
}

### 何かして通ったら git add
##### perl -c && git add :
function pcga(){
        perl -c $1 && git add -p $1
}

### ruby -c && git add :
function rcga(){
        ruby -c $1 && git add -p $1
}

### rspec && git add :
function rsga(){
        rspec $1 && git add -p $1
}


# git branch
alias gb="git branch "
alias gob="git branch | perl -ln -e 'next if /master$/;print $1 if /^  (.+)/'"
### git remote/origin branch
function git-remote-origin-branch() {
  #git fetch --prune --quiet
  git branch -a | perl -ln -e 'print $1 if /remotes\/origin\/([^ ]+)/ && ! ($1 eq "HEAD")' | sort
}
### git local branch
function git-local-not-current-branch() {
  git branch | perl -ln -e 'next if /master/ || /^\*/; print $1 if $_ =~ /(\S+)/'
}
### git local-present-remote-absent
function git-local-present-remote-absent() {
  git fetch --prune --quiet
  comm -13 <(git-remote-origin-branch) <(git-local-not-current-branch)
}

### git merged branch : カレントブランチ に merge 済のローカルブランチ一覧を表示
alias gmb='git fetch --prune --quiet && git branch --merged | perl -ln -e "next if /^\*/;next if /^\s+master$/;print"'
### git merged branch : 最新のorigin/master に merge 済のローカルブランチ一覧を表示
# alias gmb='git fetch --prune --quiet && git branch --merged `git log origin/master --format="%H" -n1` | perl -ln -e "next if /^\*/;next if /^\s+master$/;print"'
### git pull-request branch : "pr/"から始まる非カレントブランチ (pull-requestのブランチ)
alias gpb='git branch | grep "^  pr/"'
# git diff
alias gd="git diff --ignore-space-change "
alias gdcw="gd --color-words "
alias gdwd="gd --word-diff "

alias gdc="gd --cached "
alias gdcwd="gdc --word-diff "
alias gdccw="gdc --color-words "

alias gdfh="gd ..FETCH_HEAD"
alias gdwdfh="gdwd ..FETCH_HEAD"
alias gdcwfh="gdcw ..FETCH_HEAD"

alias gdno="git diff --name-only "
alias gdns="git diff --name-status "
alias gds="git diff --stat "

### git diff origin/XXX : 現在のカレントブランチとリモートのdiffをとる
alias gdo="git fetch --prune --quiet && git diff {origin/,}$(git rev-parse --abbrev-ref HEAD)"
## git gc
alias ggc="git gc >& /dev/null 2>&1 &"
alias ggca="git gc --aggressive >& /dev/null 2>&1 &"
alias ggcp="git gc --prune >& /dev/null 2>&1 &"
## git log
alias gl="git log"
## git status
alias gs="git status"
alias gsp="git status --porcelain "
alias modifiedfile="gsp | perl -wln -e 'print \$2 if /^([ AMD]){2}(.+)/'"

# ghq
function cdr {
  if [ "$1" != "" ]; then
    local peco_option="--query $1"
  fi
  exec_unless_empty cd $(ghq list -p | peco $peco_option)
}

# grep
alias grep="grep --color"

# history
alias hisgrep="history | grep "

# iconv
alias s2u="iconv -f sjis -t utf8 "
alias u2s="iconv -f utf8 -t sjis "

# ls
alias la="ls -a "
alias ll="ls -la "
alias ls='ls -F';

# lv
alias lse="lv -Is -Oej"
alias lue="lv -Iu8 -Oej"

# mysql
function from_unixtime(){
  mysql -NBe "select from_unixtime($1)"
}

function unixtime(){
  mysql -NBe 'select unix_timestamp()'
}

function unix_timestamp(){
  mysql -NBe "select unix_timestamp('$*')"
}

# rbenv
# http://stackoverflow.com/questions/30179484/install-latest-stable-version-of-ruby-using-rbenv/301798499
alias latest_stable_ruby_version='rbenv install -l | grep -v - | tail -1'

# rm
alias rm="rm -i "

# rails
alias rails="bundle exec rails "

# rake
alias rake="bundle exec rake "
function rake_search_and_open_task {
  if [ "$1" != "" ]; then
    local peco_option="--query $1"
  fi
  exec_unless_empty vimc $(rake -W | peco $peco_option | ruby -nla -e 'puts $1 if $F.fetch(2) =~ /^(.+):{1}/')
}

function rake_search_routes {
  if [ "$1" != "" ]; then
    local peco_option="--query $1 --select-1"
  fi
  rake routes | peco $peco_option
}

# rspec
alias rspec="bundle exec rspec "

# rsync
alias rsync="rsync --bwlimit=1000 " # 1000Kbyte/sで帯域制限

# scp
alias scp="cat ~/.ssh/conf.d/*.conf > ~/.ssh/config;scp" # see: http://qiita.com/tumf/items/73e495e1274bc25acf5f
alias scp="scp -l 8000 " # 8000Kbit/sで帯域制限

# ssh
alias ssh="cat ~/.ssh/conf.d/*.conf > ~/.ssh/config;ssh" # see: http://qiita.com/tumf/items/73e495e1274bc25acf5f

# tee
alias temptee="tee /tmp/tee.`date +%Y%m%d`"
alias tail_temptee="tail -F /tmp/tee.`date +%Y%m%d`"
alias empty_temptee="cat /dev/null > /tmp/tee.`date +%Y%m%d`"
function create_tmp() {
  filetype=$1;

  if [ $filetype = 'shell' ]; then
    file_ext="sh"
  elif [ $filetype = 'ruby' ]; then
    file_ext="rb"
  else
    file_ext=$filetype
  fi

  filepath="/tmp/`date +\%Y\%m\%d`.${file_ext}"
  vim $filepath
}

# vim
# -u ... vimrc 指定 (vi互換になる)
# -i ... viminfo 指定
# -N ... vi互換解除
alias vim="vim -u $HOME/.vimrc -i $HOME/.viminfo -N"
alias vim-plugin-install="vim +PlugInstall +q"
alias vim-plugin-update="vim +PlugUpdate +q"

# Usage: `vimc file_name:line`
function vimc(){
  if [[ $1  =~ ^(.+):([0-9]+)$ ]]; then
    _FILENAME=${BASH_REMATCH[1]}
    _LINE_NUMBER=${BASH_REMATCH[2]}

    vim -c ${_LINE_NUMBER} ${_FILENAME}
  else
    vim $1
  fi
}

alias peco='peco --select-1 '

# perl - with carton
function uriescape(){
  carton exec perl -MURI::Escape -e "print uri_escape(q{$1}) . \"\n\" "
}

function decode_base64(){
  carton exec perl -MMIME::Base64 -e "print decode_base64(q{$1})";
}

# Usage: exec_unless_empty cd    ... do nothing
#        exec_unless_empty cd ~/ ... execute 'cd ~/'
function exec_unless_empty() {
  command=$1
  shift

  if [ $# -ne 0 ]; then
    $command $@
  fi
}

# 非推奨になったネットワークコマンド養成ギプス
# http://blog.livedoor.jp/sonots/archives/38589335.html
# -----------------------------------------------------------------------------
net_tools_deprecated_message () {
  echo -n 'net-tools コマンドはもう非推奨ですよ？おじさんなんじゃないですか？ '
}

arp () {
  net_tools_deprecated_message
  echo 'Use `ip n`'
}
# ifconfig () {
#   net_tools_deprecated_message
#   echo 'Use `ip a`, `ip link`, `ip -s link`'
# }
iptunnel () {
  net_tools_deprecated_message
  echo 'Use `ip tunnel`'
}
iwconfig () {
  echo -n 'iwconfig コマンドはもう非推奨ですよ？おじさんなんじゃないですか？ '
  echo 'Use `iw`'
}
nameif () {
  net_tools_deprecated_message
  echo 'Use `ip link`, `ifrename`'
}
netstat () {
  net_tools_deprecated_message
  echo 'Use `ss`, `ip route` (for netstat -r), `ip -s link` (for netstat -i), `ip maddr` (for netstat -g)'
}
route () {
  net_tools_deprecated_message
  echo 'Use `ip r`'
}
